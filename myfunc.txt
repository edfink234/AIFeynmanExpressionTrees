// myfunc.cpp
#include <cmath>
#include <complex>
#include <cstdlib>
#include <iostream>
#include <numeric>
#include <Eigen/Dense>
#include <emscripten/emscripten.h>
#include <unsupported/Eigen/NonLinearOptimization>
#include <unsupported/Eigen/NumericalDiff>

using namespace Eigen;
using std::complex;

double lastResidual = 0;
double lastNLSResidual = 0.0;

// Example helper: hyperbolic secant
extern "C"
{
    EMSCRIPTEN_KEEPALIVE
    double sech(double x)
    {
        return 1.0 / cosh(x);
    }
}
extern "C" {
    EMSCRIPTEN_KEEPALIVE
    double getLastResidual() {
        return lastResidual;
    }
    EMSCRIPTEN_KEEPALIVE
    double getNLSResidual() {
        return lastNLSResidual;
    }
}
// Export a function to compute eigenvalues from a complex matrix.
// We assume that the input matrix is passed as a pointer to double
// representing 2*N*N doubles, where each complex number is interleaved:
// [Re_0, Im_0, Re_1, Im_1, ..., Re_{N*N-1}, Im_{N*N-1}]
// N is provided as an additional argument.
//
// This function computes the eigenvalues using Eigenâ€™s ComplexEigenSolver
// and returns a pointer to a newly allocated array of 2*N doubles (real and imaginary parts)
// representing the eigenvalues. (Memory management on the JS side is your responsibility.)

extern "C"
{
    EMSCRIPTEN_KEEPALIVE
    double* computeEigenspectrum(double* inMat, int N)
    {
        // Create an Eigen complex matrix of size N x N.
        MatrixXcd M(N, N);
        // Fill the matrix by reading from the interleaved input array.
        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < N; j++)
            {
                int idx = 2 * (i * N + j);
                double re = inMat[idx];
                double im = inMat[idx + 1];
                M(i, j) = complex<double>(re, im);
            }
        }
//        std::cout << "done" << std::endl;
        // Compute the eigenvalues.
        ComplexEigenSolver<MatrixXcd> ces;
//        std::cout << "Matrix M size: " << M.rows() << " x " << M.cols() << std::endl;
//        std::cout << "M(0,0) = " << M(0,0) << std::endl;  // check that data looks sane
        ces.compute(M);
        
        if (ces.info() != Eigen::Success)
        {
            // Eigenvalue computation failed
            return nullptr;
        }
        
        
        auto lambdas = ces.eigenvalues();
        auto vectors = ces.eigenvectors();

        // === STEP 1: Create index list [0, 1, ..., N-1]
        std::vector<int> indices(N);
        std::iota(indices.begin(), indices.end(), 0);

        // === STEP 2: Sort indices by descending real part of eigenvalues
        std::sort(indices.begin(), indices.end(), [&](int i, int j) {
            return lambdas[i].real() > lambdas[j].real();
        });

        // === STEP 3: Allocate output buffer
        int totalDoubles = 2 * N + 2 * N * N;
        double* output = (double*) malloc(totalDoubles * sizeof(double));
        if (!output) return nullptr;

        // === STEP 4: Write sorted eigenvalues
        for (int i = 0; i < N; i++) {
            int idx = indices[i];
            std::complex<double> lambda = lambdas[idx];
            output[2 * i]     = lambda.real();
            output[2 * i + 1] = lambda.imag();
        }

        // === STEP 5: Write sorted eigenvectors (column-major: each col is a vec)
        for (int j = 0; j < N; j++) {
            int idx = indices[j];  // get sorted index
            VectorXcd v = vectors.col(idx);
            for (int i = 0; i < N; i++) {
                int outIdx = 2 * N + 2 * (j * N + i);  // after eigenvalues
                output[outIdx]     = v(i).real();
                output[outIdx + 1] = v(i).imag();
            }
        }
        
        // Compute accuracy: ||Mv - lambda*v|| for each eigenpair
        double max_residual = 0.0;
        for (int j = 0; j < N; j++) {
            VectorXcd v = ces.eigenvectors().col(j);
            complex<double> lambda = ces.eigenvalues()(j);
            VectorXcd residual = M * v - lambda * v;
            double norm = residual.norm();  // 2-norm
            if (norm > max_residual) max_residual = norm;
        }
        lastResidual = max_residual;
        std::cout << "max residual =" << lastResidual << '\n';
        // Store the max residual in a static variable so we can retrieve it in JS

        return output;
    }
}

// Define a functor for Levenberg-Marquardt
template<typename T>
struct NLSResidualFunctor {
    using Scalar = T;
    using InputType = Eigen::Matrix<T, Eigen::Dynamic, 1>;
    using ValueType = Eigen::Matrix<T, Eigen::Dynamic, 1>;
    using JacobianType = Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>;

    enum {
        InputsAtCompileTime = Eigen::Dynamic,
        ValuesAtCompileTime = Eigen::Dynamic
    };
    
    int N;
    double dx;
    double* V;
    double g;
    double omega;

    NLSResidualFunctor(int N_, double dx_, double* V_, double g_, double omega_)
        : N(N_), dx(dx_), V(V_), g(g_), omega(omega_) {}

    int inputs() const { return 2 * N; }       // Real and Imag parts
    int values() const { return 2 * N; }       // Residual vector size

    // Computes F(x) = residual vector
    int operator()(const Eigen::VectorXd& U, Eigen::VectorXd& F) const {
        Eigen::VectorXd Ur = U.head(N);
        Eigen::VectorXd Ui = U.tail(N);
        Eigen::VectorXd D2Ur(N), D2Ui(N);

        for (int i = 0; i < N; ++i) {
            int ip = (i + 1) % N;
            int im = (i - 1 + N) % N;
            D2Ur[i] = (Ur[ip] - 2 * Ur[i] + Ur[im]) / (dx * dx);
            D2Ui[i] = (Ui[ip] - 2 * Ui[i] + Ui[im]) / (dx * dx);
        }

        for (int i = 0; i < N; ++i) {
            double r = Ur[i], im = Ui[i];
            double U2 = r*r + im*im;
            double common = g * U2 + V[i] + omega;
            F[i] = -0.5 * D2Ur[i] + common * r;
            F[N + i] = -0.5 * D2Ui[i] + common * im;
        }
        return 0;
    }
    
    int df(const InputType& U, JacobianType& J) const {
        Eigen::VectorXd Ur = U.head(N);
        Eigen::VectorXd Ui = U.tail(N);

        Eigen::MatrixXd D2 = Eigen::MatrixXd::Zero(N, N);
        for (int i = 0; i < N; ++i) {
            D2(i, i) = -2;
            D2(i, (i + 1) % N) = 1;
            D2(i, (i - 1 + N) % N) = 1;
        }
        D2 /= (dx * dx);

        Eigen::VectorXd diagJ11(N), diagJ22(N), diagJ12(N);
        for (int i = 0; i < N; ++i) {
            double r = Ur[i], im = Ui[i];
            diagJ11[i] = g * (3 * r * r + im * im) + V[i] + omega;
            diagJ22[i] = g * (r * r + 3 * im * im) + V[i] + omega;
            diagJ12[i] = 2 * g * r * im;
        }

        Eigen::MatrixXd J11 = (-0.5 * D2).eval() + diagJ11.asDiagonal().toDenseMatrix();
        Eigen::MatrixXd J22 = (-0.5 * D2).eval() + diagJ22.asDiagonal().toDenseMatrix();
        Eigen::MatrixXd J12 = diagJ12.asDiagonal();

        // Assemble full 2N x 2N Jacobian
        J.topLeftCorner(N, N)     = J11;
        J.topRightCorner(N, N)    = J12;
        J.bottomLeftCorner(N, N)  = J12;
        J.bottomRightCorner(N, N) = J22;

        return 0;
    }
};

extern "C" {
EMSCRIPTEN_KEEPALIVE
double* refineCpp(double* U_init, double* V, int N, double dx, double g, double omega) {
    Eigen::VectorXd U(2 * N);
    for (int i = 0; i < 2 * N; ++i) U[i] = U_init[i];
    
    NLSResidualFunctor<double> functor(N, dx, V, g, omega);
    //Eigen::NumericalDiff<NLSResidualFunctor<double>> numDiff(functor);
    //Eigen::LevenbergMarquardt<Eigen::NumericalDiff<NLSResidualFunctor<double>>> lm(numDiff);
    Eigen::LevenbergMarquardt<NLSResidualFunctor<double>> lm(functor);

    
    
    lm.parameters.maxfev = 10000;
    //lm.parameters.xtol = 1e-5;
    Eigen::VectorXd F(2 * N);
    lm.minimize(U);
    functor(U, F);
    lastNLSResidual = F.norm();  // L2 norm of residual

    // Allocate result
    double* result = (double*) malloc(sizeof(double) * 2 * N);
    if (!result) return nullptr;
    for (int i = 0; i < 2 * N; ++i) result[i] = U[i];
    return result;
}
}

//emcc myfunc.cpp -O2 -s WASM=1 -s MODULARIZE=1 -s EXPORT_NAME="createModule" \
//  -s EXPORTED_FUNCTIONS='["_sech", "_computeEigenspectrum", "_getLastResidual", "_refineCpp", "_malloc", "_free"]' \
//  -s EXPORT_ES6=1 \
//  -s EXPORTED_RUNTIME_METHODS="['ccall', 'cwrap']" \
//  -s TOTAL_MEMORY=1073741824 \
//  -s INITIAL_MEMORY=268435456 \
//  -s STACK_SIZE=10485760 \
//  -I/opt/homebrew/opt/eigen/include/eigen3 \
//  -o myfunc.js
